using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using UnityEngine;

namespace PathFindingAsteria
{

    /// <summary>
    ///     The GridManager class is used to manage objects
    ///     that are creating a grid, and also manage objects 
    ///     finding paths off of this grid. It is not required 
    ///     for grid making nor pathfinding, however it will allow
    ///     visualization of the grid within the Unity Editor.
    /// </summary>
    public class GridManager : MonoBehaviour
    {
        #region Editor

        [Header("Grid Information")]

        [Tooltip("A trigger to recreate the base graph")]
        [SerializeField] bool recreateGraph         = false;

        [Tooltip("Will autodraw the graph if a gridviewer is attached")]
        [SerializeField] bool autoDraw              = false;

        [Tooltip("Forces all objects on the grid to go to this object if they are not individually defined")]
        [SerializeField] GameObject targetObject    = null;

        [SerializeField] internal Grid gridBase     = new Grid();

        [Header("Pathfinders Information")]
        [Tooltip("A trigger to recreate the path through the graph")]
        [SerializeField] bool findObjectPaths       = false;


        [Tooltip("These objects will find a path between themselves and the target")]
        [SerializeField]
        List<GameObject> pathFinders                = new List<GameObject>();

        
        #endregion

        #region Properties

        /// <summary>
        ///     The drawing action that any grid visualization tool can
        ///     subscribe to in order to draw the path
        /// </summary>
        internal Action DrawMe;

        /// <summary>
        ///     Get a list of all the pathfinding objects attached
        ///     the pathfinders that are attached to the manager
        /// </summary>
        public List<PathFindingObject> PathFindingObjects
        {
            get
            {
                List<PathFindingObject> temp = new List<PathFindingObject>();
                foreach (GameObject go in pathFinders)
                {
                    var pf = go.GetComponent<PathFindingObject>();
                    if (pf != null) { temp.Add(pf); }
                }

                return temp;
            }
        }


        /// <summary>
        ///     The grid to create off of
        /// </summary>
        public Grid SetGrid
        {
            set
            {
                gridBase = value;
            }
            get
            {
                return gridBase;
            }
        }

        /// <summary>
        ///     The execution length of the grid
        /// </summary>
        public double GridTime
        {
            get
            {
                return gridBase.TimeTaken;
            }
        }


        /// <summary>
        ///     The nodes generated by the graph
        ///     we hold this in case we are generating a new one on the fly
        ///     and we would not have access to it during that time
        /// </summary>
        internal Node[,,] Nodes
        {
            get { return gridBase.GridNodes; }
        }
        /// <summary> How many nodes have been created  </summary>
        public int NodeCount
        {
            get
            {
                if (gridBase?.GridNodes == null)
                {
                    return 0;
                }
                return gridBase.GridNodes.Length;
            }
        }

        /// <summary>
        ///     A list of all the qualified pathfinding objects
        /// </summary>
        internal List<GameObject> PathFinders
        {
            get
            {
                return pathFinders;
            }
        }

        #endregion

        #region Editor Testing

        public void FixedUpdate()
        {
            // Graph Creation
            if (recreateGraph) { createOurGraph(); }

            if (gridBase.CreationComplete)
            {
                findPaths();
            }
        }

        #endregion

        #region Private 

        #region Pathfinding


        /// <summary>
        ///     Run through and find the path for each object looking
        /// </summary>
        void findPaths()
        {
            if (findObjectPaths)
            {
                foreach (GameObject go in pathFinders)
                {
                    var pf = go.GetComponent<PathFindingObject>();

                    if (!pf.RecreatePath)
                    {
                        pf.RecreatePath = true;
                    }
                }
                findObjectPaths = false;
            }
        }

        /// <summary>
        ///     Assign the created grid to each of the pathfinding objects
        /// </summary>
        void assignGrids()
        {
            foreach (GameObject go in pathFinders)
            {
                var pf = go.GetComponent<PathFindingObject>();

                if (pf == null)
                {
                    go.AddComponent(typeof(PathFindingObject));
                    pf = go.GetComponent<PathFindingObject>();
                    pf.SetDefaultValues();
                }

                pf.pathParameters.gridBase = gridBase;
                GameObject obj = gameObject;
                if (targetObject != null) { obj = targetObject; }
                if (pf.EndObject == null) { pf.EndObject = obj; }

            }
        }
        #endregion

        #region Grid

        /// <summary>
        ///     Create a new graph when requested
        /// </summary>
        void createOurGraph()
        {

            Grid tempGrid = gridBase;
            // If we do not have a location specified, just start here
            if (tempGrid.StartObject == null)
            {
                tempGrid.StartObject = this.transform.gameObject;
            }

            // start it
            if (!tempGrid.CreationStarted)
            {
                Debug.Log("Grid Creation Start - " + DateTime.Now);
                tempGrid.Init(this);
            }

            // Update the graph if we are iterating and it is not completed
            if (!tempGrid.CreationComplete)
            {
                tempGrid.UpdateGrid();
            }

            gridBase = tempGrid;
            // reset the bool trigger
            if (tempGrid.CreationComplete)
            {
                recreateGraph = false;
                assignGrids();
                findPaths();
                Debug.Log($"Grid Complete at [{DateTime.Now}]: Time was " + (tempGrid.TimeTaken).ToString());
                DeterminDraw();
            }

        }

        /// <summary>
        ///     Will determine if and how we can visualize our nodes in the editor
        /// </summary>
        void DeterminDraw()
        {
            if (autoDraw)
            {
                // check for the grid viewer
                var viewer = gameObject.GetComponent<GridViewer>();
                if (viewer == null)
                {
                    gameObject.AddComponent(typeof(GridViewer));
                }

                DrawMe?.Invoke();
            }
        }

        #endregion

        #endregion

        #region Public functions

        /// <summary>
        ///     Try to redraw the entity
        /// </summary>
        /// <returns></returns>
        public void TryDraw()
        {
            try
            {
                DeterminDraw();
            }
            catch { }
        }

        /// <summary>
        ///     Turn on the graph creation
        /// </summary>
        public void RecreateGraph()
        {
            recreateGraph = true;
        }

        /// <summary>
        ///     Recreate each objects path along the grid
        /// </summary>
        public void RecreatePaths()
        {
            findObjectPaths = true;
        }


        /// <summary>
        ///     Add a gameobject to the list of pathfinders
        /// </summary>
        /// <param name="go"> A gameobject to add to the list</param>
        /// <remarks>
        ///     If the gameobject does not have a the pathfinder attached,
        ///     it will be given a generic one
        /// </remarks>
        public void AddPathFinder( GameObject go )
        {
            pathFinders.Add(go);
        }

        #endregion

    }
}